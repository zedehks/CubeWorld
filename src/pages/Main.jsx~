import React from 'react';
import clsx from 'clsx';
import
{
    Drawer,
    AppBar,
    Toolbar,
    List,
    CssBaseline,    
    Typography,
    Divider,
    IconButton,
    ListItem,
    ListItemIcon,
    ListItemText,
}from '@material-ui/core';
import RestoreIcon from '@material-ui/icons/Restore';
import MenuIcon from '@material-ui/icons/Menu';
import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';
import ExitToAppIcon from '@material-ui/icons/ExitToApp';
import TimelineIcon from  '@material-ui/icons/Timeline';
import {makeStyles, useTheme} from '@material-ui/core/styles';

import Timer from '../components/Timer';

const drawerWidth = 240;

const useStyles = makeStyles((theme) => ({
        root: {
            display: 'flex',            
        },
        appBar: {
            zIndex: theme.zIndex.drawer + 1,
            transition: theme.transitions.create(['width','margin'], {
                easing: theme.transitions.easing.sharp,
                duration: theme.transitions.duration.leavingScreen,
            }),
        },
    appBarShift: {
        marginLeft: drawerWidth,
        width: `calc(100% - ${drawerWidth}px)`,
        transition: theme.transitions.create(['width','margin'], {
            easing:theme.transitions.easing.sharp,
            duration: theme.transitions.duration.enteringScreen,
        }),                
    },
    menuButton: {
        marginRight: 36,
    },
    hide: {
        display: 'none',                
    },
    drawer: {
        width: drawerWidth,
        flexShrink: 0,
        whiteSpace: 'nowrap',                
    },
    drawerOpen: {
        width: drawerWidth,
        transition: theme.transitions.create('width', {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.enteringScreen,
        }),                
    },
    drawerClose: {
        transition: theme.transitions.create('width', {
            easing: theme.transitions.easing.sharp,
            duration: theme.transitions.duration.leavingScreen,
        }),
        overflowX: 'hidden',
        width: theme.spacing(7) + 1,
        [theme.breakpoints.up('sm')]: {
            width: theme.spacing(9) + 1,
        },
    },
    toolbar: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-end',
        padding: theme.spacing(0,1),
        
        ...theme.mixins.toolbar,
    },
    content: {
        flexGrow: 1,
        padding: theme.spacing(3),
    },
}));


export default function Main({idVar, logout})
{
    const comps = useStyles();
    const theme = useTheme();
    const [open, setOpen] = React.useState(false);

    const handleDrawerOpen = () => {
        console.log('open');
        setOpen(true);
        console.log(open);
    };
    const handleDrawerClose = () => {
        console.log('close');
        setOpen(false);        
    };
    function findIcon(index)
    {
        switch(index){
        case 0:
            return <RestoreIcon />;
        case 1:
            return <TimelineIcon />;
        case 2:
            return <ExitToAppIcon />;
        default:
            return null;
        }
    }
    function findFunc(index)
    {
        
    }
    return (
        <div className={comps.root}>
          <CssBaseline />
          <AppBar
            position="fixed"
            className={clsx(comps.appBar, {
                [comps.appBarShift]: open,
            })}
          >
            <Toolbar>
              <IconButton
                color="inherit"
                onClick={handleDrawerOpen}
                edge="start"
                className={clsx(comps.menuButton, {
                    [comps.hide]: open,
                })}
              >
                <MenuIcon />
              </IconButton>
              <Typography variant="h6" noWrap>
                CubeWorld
              </Typography>
            </Toolbar>
          </AppBar>
          <Drawer
            variant="permanent"
            className={clsx(comps.drawer, {
                [comps.drawerOpen]: open,
                [comps.drawerClose]: !open,
            })}
            classes={{
                paper: clsx({
                    [comps.drawerOpen]: open,
                    [comps.drawerClose]: !open,
                }),
            }}
          >
            <div className={comps.toolbar}>
              <IconButton onClick={handleDrawerClose}>
                <ChevronLeftIcon />
              </IconButton>
            </div>
            <Divider />
            <List>
              {['Sessions', 'Statistics', 'Logout'].map((text,index) => (
                  <ListItem button key={text}>
                    <ListItemIcon>{findIcon(index)}</ListItemIcon>
                    <ListItemText primary={text} />
                  </ListItem>
              ))}
            </List>
          </Drawer>
          <main className={comps.content}>
            <div className={comps.toolbar}/>
            <Timer />
          </main>          
        </div>  
    );
}
